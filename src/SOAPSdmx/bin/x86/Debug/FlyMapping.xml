<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FlyMapping</name>
    </assembly>
    <members>
        <member name="T:FlyMapping.Model.ICodelistManager">
            <summary>
            Interface for Codelists Manager
            CodelistsManager retrieves the data for build  Codelist
            </summary>
        </member>
        <member name="T:FlyMapping.Model.IBaseManager">
            <summary>
            Interface for connetion to Database
            </summary>
        </member>
        <member name="P:FlyMapping.Model.IBaseManager.DbAccess">
            <summary>
            for retrival data from database
            </summary>
        </member>
        <member name="P:FlyMapping.Model.IBaseManager.parsingObject">
            <summary>
             Parsing Object <see cref="T:FlyController.Model.ISdmxParsingObject"/>
            </summary>
        </member>
        <member name="P:FlyMapping.Model.IBaseManager.versionTypeResp">
            <summary>
            Sdmx Version
            </summary>
        </member>
        <member name="P:FlyMapping.Model.IBaseManager.ReferencesObject">
            <summary>
            Referenced objects 
            </summary>
        </member>
        <member name="M:FlyMapping.Model.ICodelistManager.GetCodelistConstrain">
            <summary>
            retrieves the codelist Contrain  from database
            </summary>
            <returns>list of Codelist for SDMXObject</returns>
        </member>
        <member name="M:FlyMapping.Model.ICodelistManager.GetCodelistNoConstrain">
            <summary>
            retrieves the codelist Contrain from database
            </summary>
            <returns>list of Codelist for SDMXObject</returns>
        </member>
        <member name="M:FlyMapping.Model.ICodelistManager.GetCodelistReferences(FlyEngine.Model.IReferencesObject)">
            <summary>
            retrieves the codelist Contrain from database
            </summary>
            <param name="refObj">Referenced Objects</param>
            <returns>list of Codelist for SDMXObject</returns>
        </member>
        <member name="T:FlyMapping.Model.IConceptSchemeManager">
            <summary>
            Interface for Concept Scheme
            </summary>
        </member>
        <member name="M:FlyMapping.Model.IConceptSchemeManager.GetConceptSchemes">
            <summary>
            Build a ConceptSchemes
            </summary>
            <returns>list of IConceptSchemeObject for SdmxObject</returns>
        </member>
        <member name="M:FlyMapping.Model.IConceptSchemeManager.GetConceptSchemesReferences(FlyEngine.Model.IReferencesObject)">
            <summary>
            Build a ConceptSchemes
            </summary>
            <param name="refObj">Referenced Objects</param>
            <returns>list of IConceptSchemeObject for SdmxObject</returns>
        </member>
        <member name="T:FlyMapping.Model.IDsdManager">
            <summary>
            Interface for DSD Manager
            DsdManager retrieves the data for build  KeyFamilies (sdmx v 2.0) or DataStructures (sdmx v 2.1)
            </summary>
        </member>
        <member name="M:FlyMapping.Model.IDsdManager.GetDSDs">
            <summary>
            retrieves the DSD from database
            </summary>
            <returns>list of DataStructure for SDMXObject</returns>
        </member>
        <member name="M:FlyMapping.Model.IDsdManager.GetDSDsReferences(FlyEngine.Model.IReferencesObject)">
            <summary>
            retrieves the DSD from database
            </summary>
            <param name="refObj">Referenced Objects</param>
            <returns>list of DataStructure for SDMXObject</returns>
        </member>
        <member name="T:FlyMapping.Model.IFLAGManager">
            <summary>
            Interface for FLAG Manager
            FLAGManager retrieves the data for FLAG Concept
            </summary>
        </member>
        <member name="M:FlyMapping.Model.IFLAGManager.GetFlag">
            <summary>
            Get Flag Attribute (OBS_STATUS)
            </summary>
            <returns>Flag Attribute</returns>
        </member>
        <member name="T:FlyMapping.Model.IGroupsManager">
            <summary>
            Interface for retreive Groups information from Database
            </summary>
        </member>
        <member name="M:FlyMapping.Model.IGroupsManager.GetGroups(System.String,System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            Get Groups information from Database
            </summary>
            <param name="DataFlowID">Dataflow Code</param>
            <param name="GroupId">Group Code</param>
            <param name="DimensionRef">All Dimension in references of Group</param>
            <param name="AttributeRef">All Attribute that referenced this Group</param>
            <returns>List of <see cref="T:FlyController.Model.DataGroupObject"/></returns>
        </member>
        <member name="T:FlyMapping.Model.IMetadataFactory">
            <summary>
            Management Instance of FlyMapping
            </summary>
        </member>
        <member name="M:FlyMapping.Model.IMetadataFactory.InstanceAgencyManager(FlyController.Model.ISdmxParsingObject,Org.Sdmxsource.Sdmx.Api.Constants.SdmxSchemaEnumType)">
            <summary>
            initializes the correct class for the IAgencyManager interface
            </summary>
            <param name="_parsingObject">the <see cref="T:FlyController.Model.ISdmxParsingObject"/></param>
            <param name="_versionTypeResp">Sdmx Version</param>
            <returns><see cref="T:FlyMapping.Model.IAgencyManager"/> Instance</returns>        
        </member>
        <member name="M:FlyMapping.Model.IMetadataFactory.InstanceCategoriesManager(FlyController.Model.ISdmxParsingObject,Org.Sdmxsource.Sdmx.Api.Constants.SdmxSchemaEnumType)">
            <summary>
            initializes the correct class for the ICategoriesManager interface
            </summary>
            <param name="_parsingObject">the <see cref="T:FlyController.Model.ISdmxParsingObject"/></param>
            <param name="_versionTypeResp">Sdmx Version</param>
            <returns><see cref="T:FlyMapping.Model.ICategoriesManager"/> Instance</returns>
        </member>
        <member name="M:FlyMapping.Model.IMetadataFactory.InstanceCodelistsManager(FlyController.Model.ISdmxParsingObject,Org.Sdmxsource.Sdmx.Api.Constants.SdmxSchemaEnumType)">
            <summary>
            initializes the correct class for the ICodelistsManager interface
            </summary>
            <param name="_parsingObject">the <see cref="T:FlyController.Model.ISdmxParsingObject"/></param>
            <param name="_versionTypeResp">Sdmx Version</param>
            <returns><see cref="T:FlyMapping.Model.ICodelistManager"/> Instance</returns>
        </member>
        <member name="M:FlyMapping.Model.IMetadataFactory.InstanceDataflowsManager(FlyController.Model.ISdmxParsingObject,Org.Sdmxsource.Sdmx.Api.Constants.SdmxSchemaEnumType)">
            <summary>
            initializes the correct class for the IDataflowsManager interface
            </summary>
            <param name="_parsingObject">the <see cref="T:FlyController.Model.ISdmxParsingObject"/></param>
            <param name="_versionTypeResp">Sdmx Version</param>
            <returns><see cref="T:FlyMapping.Model.IDataflowsManager"/> Instance</returns>
        </member>
        <member name="M:FlyMapping.Model.IMetadataFactory.InstanceConceptSchemeManager(FlyController.Model.ISdmxParsingObject,Org.Sdmxsource.Sdmx.Api.Constants.SdmxSchemaEnumType)">
            <summary>
            initializes the correct class for the IConceptSchemeManager interface
            </summary>
            <param name="_parsingObject">the <see cref="T:FlyController.Model.ISdmxParsingObject"/></param>
            <param name="_versionTypeResp">Sdmx Version</param>
            <returns><see cref="T:FlyMapping.Model.IConceptSchemeManager"/> Instance</returns>
        </member>
        <member name="M:FlyMapping.Model.IMetadataFactory.InstanceDsdManager(FlyController.Model.ISdmxParsingObject,Org.Sdmxsource.Sdmx.Api.Constants.SdmxSchemaEnumType)">
            <summary>
            initializes the correct class for the IDsdManager interface
            </summary>
            <param name="_parsingObject">the <see cref="T:FlyController.Model.ISdmxParsingObject"/></param>
            <param name="_versionTypeResp">Sdmx Version</param>
            <returns><see cref="T:FlyMapping.Model.IDsdManager"/> Instance</returns>
        </member>
        <member name="T:FlyMapping.Model.Enum.SpacialColumsNamesEnum">
            <summary>
            Enumerator that representing a SpecialColum name to mapping
            </summary>
        </member>
        <member name="F:FlyMapping.Model.Enum.SpacialColumsNamesEnum._TIME_">
            <summary>
            Time SpecialColum name
            </summary>
        </member>
        <member name="F:FlyMapping.Model.Enum.SpacialColumsNamesEnum._TIME">
            <summary>
            Time SpecialColum name
            </summary>
        </member>
        <member name="F:FlyMapping.Model.Enum.SpacialColumsNamesEnum.VALUE">
            <summary>
            Value (OBS_VALUE) SpecialColum name
            </summary>
        </member>
        <member name="F:FlyMapping.Model.Enum.SpacialColumsNamesEnum._VALUE_">
            <summary>
            Value (OBS_VALUE) SpecialColum name
            </summary>
        </member>
        <member name="F:FlyMapping.Model.Enum.SpacialColumsNamesEnum.FLAGS">
            <summary>
            Flag (OBS_STATUS) SpecialColum name
            </summary>
        </member>
        <member name="T:FlyMapping.Model.IDBAccess">
            <summary>
            Interface for Access to Database
            </summary>
        </member>
        <member name="M:FlyMapping.Model.IDBAccess.Execute(FlyController.Model.DbSetting.DBOperationEnum,System.Collections.Generic.List{FlyMapping.Model.IParameterValue})">
            <summary>
            Performs correct store procedures and it process results
            </summary>
            <param name="operation">Operations Type (indicates the store procedure to execute)</param>
            <param name="parameter">Parameters to be passed to the store procedure</param>
            <returns>Returns a list of xmlNode with which the builder that identifies the response</returns>
        </member>
        <member name="M:FlyMapping.Model.IDBAccess.ExecutetoTable(FlyController.Model.DbSetting.DBOperationEnum,System.Collections.Generic.List{FlyMapping.Model.IParameterValue})">
            <summary>
            Performs correct store procedures and it process results into Table
            </summary>
            <param name="operation">Operations Type (indicates the store procedure to execute)</param>
            <param name="parameter">Parameters to be passed to the store procedure</param>
            <returns>Returns a Table of response</returns>
        </member>
        <member name="M:FlyMapping.Model.IDBAccess.ExecuteGetData(System.Collections.Generic.List{FlyMapping.Model.IParameterValue},FlyController.Model.Delegate.GetDBResponseDelegate,FlyController.Model.Delegate.WriteResponseDelegate)">
            <summary>
            Execute a store procedure for get a Data for DataMessage
            </summary>
            <param name="parameter">Parameters to be passed to the store procedure</param>
            <param name="parse">Delegate to call for parse result</param>
            <param name="builder">Delegate to pass at GetDBResponseDelegate for write result</param>
            <returns>Object for Write response in streaming <see cref="T:FlyController.Model.IFlyWriterBody"/></returns>
        </member>
        <member name="M:FlyMapping.Model.IDBAccess.TestConnection">
            <summary>
            Connection preliminary to determine if the credentials are correct and whether the DataBase is reached
            </summary>
        </member>
        <member name="M:FlyMapping.Model.IDBAccess.CheckExistStoreProcedure(FlyController.Model.DbSetting.DBOperationEnum)">
            <summary>
            Check exist StoreProcedure in Database 
            </summary>
            <param name="operation">Get a relative StoreProcedureName</param>
            <returns>Boolean result: if true exist</returns>
        </member>
        <member name="T:FlyMapping.FlyMapping_Namespace">
            <summary>
            FlyMapping namespace is divided by:
            FlyMapping.Build
            FlyMapping.Manager
            FlyMapping.Model
            </summary>
        </member>
        <member name="T:FlyMapping.Model.IAgencyManager">
            <summary>
            Interface for Agency Manager
            </summary>
        </member>
        <member name="M:FlyMapping.Model.IAgencyManager.GetAgencyScheme">
            <summary>
            Build a AgencyScheme
            </summary>
            <returns>IAgencyScheme for SdmxObject</returns>
        </member>
        <member name="T:FlyMapping.Model.IDataMessageManager">
            <summary>
            Interface for DataMessage Manager
            DataMessageManager is class that retrieves data from the database to the requests of DataMessage
            </summary>
        </member>
        <member name="M:FlyMapping.Model.IDataMessageManager.GetTableMessage(System.String,FlyController.Model.WhereParsing.IDataWhereStatment,FlyController.Model.Delegate.WriteResponseDelegate,System.String)">
            <summary>
            Get structured Data Message from Database
            </summary>
            <param name="idDataset">Dataset Code</param>
            <param name="whereStatement">Where condition</param>
            <param name="BuilderCallback">delegate to call for write data response</param>
            <param name="TimeStamp">LastUpdate parameter request only observation from this date onwards</param>
            <returns>Object for Write response in streaming <see cref="T:FlyController.Model.IFlyWriterBody"/></returns>
        </member>
        <member name="P:FlyMapping.Model.IDataMessageManager.Concepts">
            <summary>
            List of Concept
            </summary>
        </member>
        <member name="T:FlyMapping.Model.IAttributeManager">
            <summary>
            Interface for Attribute Manager
            Get Attribute Concept from file AttributeConcepts.xml
            </summary>
        </member>
        <member name="M:FlyMapping.Model.IAttributeManager.GetAttribute(System.String)">
            <summary>
            Get Attribute Concept from file AttributeConcepts.xml
            </summary>
            <param name="DataflowCode">Dataflow Code</param>
            <returns>list of Attribute</returns>
        </member>
        <member name="M:FlyMapping.Model.IAttributeManager.GetObsValue">
            <summary>
            return OBS_VALUE concept
            </summary>
            <returns></returns>
        </member>
        <member name="T:FlyMapping.Model.ICategoriesManager">
            <summary>
            Interface for Categories Manager
            CategoriesManager retrieves the data for build  CategoryScheme and CategorisationScheme
            </summary>
        </member>
        <member name="M:FlyMapping.Model.ICategoriesManager.GetCategoryScheme">
            <summary>
            Build a CategoryScheme
            </summary>
            <returns>ICategorySchemeObject for SdmxObject</returns>
        </member>
        <member name="M:FlyMapping.Model.ICategoriesManager.GetCategorisation">
            <summary>
            Build a Categorisation
            </summary>
            <returns>list of ICategorisationObject for SdmxObject</returns>
        </member>
        <member name="M:FlyMapping.Model.ICategoriesManager.GetCategorisationReferences(FlyEngine.Model.IReferencesObject)">
            <summary>
            Build a Categorisation
            </summary>
            <param name="refObj">Referenced Objects</param>
            <returns>list of ICategorisationObject for SdmxObject</returns>
        </member>
        <member name="M:FlyMapping.Model.ICategoriesManager.GetCategorySchemeReferences(FlyEngine.Model.IReferencesObject)">
            <summary>
            Build a CategoryScheme
            </summary>
            <param name="refObj">Referenced Objects</param>
            <returns>ICategorySchemeObject for SdmxObject</returns>
        </member>
        <member name="T:FlyMapping.Model.IDataflowsManager">
            <summary>
            Interface for IDataflows Manager
            DataflowsManager retrieves the data for build DataFlows
            </summary>
        </member>
        <member name="M:FlyMapping.Model.IDataflowsManager.GetDataFlows">
            <summary>
            Build a DataFlows
            </summary>
            <returns>list of IDataflowObject for SdmxObject</returns>
        </member>
        <member name="M:FlyMapping.Model.IDataflowsManager.GetDataFlowsReferences(FlyEngine.Model.IReferencesObject)">
            <summary>
            Build a DataFlows
            </summary>
            <param name="refObj">Referenced Objects</param>
            <returns>list of IDataflowObject for SdmxObject</returns>
        </member>
        <member name="T:FlyMapping.Model.IDimensionManager">
            <summary>
             Interface for DataMessage Manager
            DimensionManager retrieves the data for build conceptScheme
            </summary>
        </member>
        <member name="M:FlyMapping.Model.IDimensionManager.GetDimensionConceptObjects(System.String,System.Collections.Generic.List{FlyController.Model.SdmxObjectNameDescription}@)">
            <summary>
            retrieves all Concept Dimension from database
            </summary>
            <param name="DataflowCode">Dataflow Code</param>
            <param name="Names">return Dataflow NameDescription</param>
            <returns>list of Dimension</returns>
        </member>
        <member name="T:FlyMapping.Model.IParameterValue">
            <summary>
            Interface of Parameter information to pass at database
            </summary>
        </member>
        <member name="P:FlyMapping.Model.IParameterValue.Item">
            <summary>
            Name of Parameter
            </summary>
        </member>
        <member name="P:FlyMapping.Model.IParameterValue.SqlType">
            <summary>
            Parameter Type in SqlDbType format
            </summary>
        </member>
        <member name="P:FlyMapping.Model.IParameterValue.Value">
            <summary>
            Parameter Value
            </summary>
        </member>
        <member name="T:FlyMapping.Build.ParameterValue">
            <summary>
            Object model Contains a Parameter information to pass at database
            </summary>
        </member>
        <member name="M:FlyMapping.Build.ParameterValue.#ctor">
            <summary>
            Create a ParameterValue instance
            </summary>
        </member>
        <member name="M:FlyMapping.Build.ParameterValue.ToString">
            <summary>
            String representation
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlyMapping.Build.ParameterValue.CreateParameter">
            <summary>
            Create a SqlParameter
            </summary>
            <returns>SqlParameter</returns>
        </member>
        <member name="P:FlyMapping.Build.ParameterValue.Item">
            <summary>
            Name of Parameter
            </summary>
        </member>
        <member name="P:FlyMapping.Build.ParameterValue.Value">
            <summary>
            Parameter Value
            </summary>
        </member>
        <member name="P:FlyMapping.Build.ParameterValue.SqlType">
            <summary>
            Parameter Type in SqlDbType format
            </summary>
        </member>
    </members>
</doc>
